function fd = discretizeStochastic(fc,inputs,input_names,ix,opt)
    % !!!!! Assumes that the last input is a stochatic term that is not in the definition of fc
    
        import casadi.*
        
        Td = opt.Ts / opt.SubSamples;
        
        fc = Function('fc',inputs,{fc(inputs{1:end-1})},input_names,{'fc'}); 
        f = Function('f',inputs,{inputs{ix}},input_names,{'f'}); % auxliary function for sub-sampling 
        for isubsample = 1 : opt.SubSamples
            switch lower(opt.DiscretizationMethod)
                case 'euler'
                    % fd = Function('fd',{x,u},...
                    %      {f(x,u) + Td*fc(f(x,u),u)},...
                    %      {'x','u'},{'fd'});
                    inputs1 = inputs;
                    inputs1{ix} = f(inputs{:});
                    fd = Function('fd',inputs,...
                        { f(inputs{:}) + Td*fc(inputs1{:}) + sqrt(Td)*inputs{end}},...
                        input_names,{'fd'});   
                case 'runge-kutta'
                    % fd = Function('fd',{x,u},...
                    %    { f(x,u) + (Td/6) * ( ...
                    %    fc(f(x,u),u) + ...
                    %    2*fc( f(x,u) + 0.5*Td * fc(f(x,u),u) ,u) + ...
                    %    2*fc( f(x,u) + 0.5*Td * fc(f(x,u)+0.5*Td*fc(f(x,u),u),u) ,u) + ...
                    %    fc(   f(x,u) + Td     * fc(f(x,u)+0.5*Td*fc(f(x,u)+0.5*Td*fc(f(x,u),u),u),u) ,u) ...
                    %    ) },...
                    %    {'x','u'},{'fd'});
                    inputs1     = inputs;                    
                    inputs1{ix} = f(inputs{:});
                    inputs2     = inputs;
                    inputs2{ix} = f(inputs{:})+0.5*Td*fc(inputs1{:});
                    inputs3     = inputs;
                    inputs3{ix} = f(inputs{:})+0.5*Td*fc(inputs2{:});
                    inputs4     = inputs;
                    inputs4{ix} = f(inputs{:})+Td*fc(inputs3{:});                                        
                    fd = Function('fd',inputs,...
                        { f(inputs{:}) + (Td/6) * ( ...
                        fc(inputs1{:}) + 2*fc(inputs2{:}) + 2*fc(inputs3{:}) + fc(inputs4{:}) ) + sqrt(Td)*inputs{end}*0 },...
                        input_names,{'fd'});
            end
            f = Function('f',inputs,{fd(inputs{:})},input_names,{'f'});
        end
        
end